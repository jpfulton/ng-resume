// Spinner control variables
$dot-color: #0040ff;
$animation-duration: 0.8s;
$dot-selector-map: ( // map of selectors with numerical indices, used for flow control later
  '.dot:nth-child(7n+1)': 1,
  '.dot:nth-child(7n+2)': 2,
  '.dot:nth-child(7n+3)': 3,
  '.dot:nth-child(7n+4)': 4,
  '.dot:nth-child(7n+5)': 5,
  '.dot:nth-child(7n+6)': 6,
  '.dot:nth-child(7n+7)': 7,
  '.dot:nth-child(7n+8)': 8,
);

// animation and background mixin for dots
@mixin dotAnimationAndBackground($duration, $delay) {
  animation: $duration linear $delay normal none infinite running load;
  background: $dot-color none repeat scroll 0 0;
}

// composite animation mixin for dot transformation and animation
@mixin dotTransformationAndAnimation($selector, $rotation, $duration, $delay) {
  #{$selector} {
    transform: rotate($rotation);
  }
  #{$selector}::before {
    @include dotAnimationAndBackground($duration, $delay);
  }  
}

// Spinner class styles
.loader {
  bottom: 0;
  height: 175px;
  left: 0;
  margin: auto;
  position: absolute;
  right: 0;
  top: 0;
  width: 175px;

  .dot {
    bottom: 0;
    height: 100%;
    left: 0;
    margin: auto;
    position: absolute;
    right: 0;
    top: 0;
    width: 87.5px;
  }

  .dot::before {
    border-radius: 100%;
    content: "";
    height: 87.5px;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    transform: scale(0);
    width: 87.5px;
  }

  // iterate over the dot-selector-map key/value pairs 
  // using dot-selector for the selector and index to perform math
  @each $dot-selector, $index in $dot-selector-map {
    @include dotTransformationAndAnimation(
      $dot-selector, 
      45deg * $index, 
      $animation-duration, 
      0.1s * $index
    );
  }

  .loading {
    background-position: 50% 50%;
    background-repeat: no-repeat;
    bottom: -40px;
    height: 20px;
    left: 0;
    position: absolute;
    right: 0;
    width: 180px;
  }
}

.spinner-message {
  text-align: center;
}

@keyframes load {
  100% {
    opacity: 0;
    transform: scale(1);
  }
}
