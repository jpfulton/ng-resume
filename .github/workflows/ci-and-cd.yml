# CI/CD workflow triggered by pushes and PRs into the default branch.
#
# References:
#   https://github.com/actions/starter-workflows/blob/main/deployments/azure-staticwebapp.yml
#   https://github.com/Azure/static-web-apps-deploy
#   https://github.com/actions/setup-node#caching-global-packages-data
#   https://github.com/cypress-io/github-action
#   https://github.com/actions/upload-artifact/tree/main
name: continous-integration-and-deployment

# Define environment variables available to all jobs and steps.
#
# To allow for finer grained control of the Angular build process, these variables (which
# are used in the Azure/static-web-apps-deploy module) are configured as though the client
# application to deploy is a simple HTML application. Following the initial steps in the
# lint_test_build_deploy_job, the build output from the 'ng build' command are placed
# in the /ng-resume/dist/ng-resume folder as completed build output artifacts and may be pushed to Azure
# as though they are a "static HTML site" in the eyes of the deploy step.
#
# Reference for framework deploy configurations: https://docs.microsoft.com/azure/static-web-apps/front-end-frameworks
env:
  APP_WORKING_DIR: "ng-resume-app"
  APP_LOCATION: "/ng-resume-app/dist/ng-resume/browser" # location of the client application build artifacts
  API_LOCATION: "/ng-resume-api"
  OUTPUT_LOCATION: "" # an empty value here causes the APP_LOCATION location to be pushed to Azure
  AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }} # repository secret containing deployment token

# Execute this workflow on pushes to the default branch or upon pull requests into the default branch.
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]

# Default permissions for each job. May be supplemented or overridden in each configured job.
permissions:
  contents: read

jobs:
  analyze:
    name: CodeQL Analyze Job
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    # Execute this job upon pushes to the default branch or
    # PRs into the default branch that are not closed.
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp', 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality
        queries: security-and-quality


    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  ci_job:
    name: CI Job
    needs: analyze

    # Execute this job upon pushes to the default branch or
    # PRs into the default branch that are not closed.
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    permissions:
      contents: read # for actions/checkout to fetch code

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        id: nodejs
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"
          cache-dependency-path: ${{ env.APP_WORKING_DIR }}/yarn.lock

      - name: Install dependencies via yarn with frozen lockfile
        id: installdeps
        working-directory: ${{ env.APP_WORKING_DIR }}
        run: yarn --frozen-lockfile

      - name: Lint application
        id: lint
        working-directory: ${{ env.APP_WORKING_DIR }}
        run: yarn run lint

      - name: Test application
        id: test
        working-directory: ${{ env.APP_WORKING_DIR }}
        run: yarn run test --configuration=ci

  cd_job:
    name: CD Job
    needs: ci_job
    outputs:
      preview-url: ${{ steps.deploy.outputs.static_web_app_url }}

    # Execute this job upon pushes to the default branch or
    # PRs into the default branch that are not closed.
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: write # for Azure/static-web-apps-deploy to comment on PRs

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        id: nodejs
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"
          cache-dependency-path: ${{ env.APP_WORKING_DIR }}/yarn.lock

      - name: Install dependencies via yarn with frozen lockfile
        id: installdeps
        working-directory: ${{ env.APP_WORKING_DIR }}
        run: yarn --frozen-lockfile

      - name: Build application
        id: build
        timeout-minutes: 5
        working-directory: ${{ env.APP_WORKING_DIR }}
        run: yarn run prerender

      # Deploy build artifacts into Azure.
      # In the event of a push into the default branch, deploy to production.
      # In the event of a pending PR into the default branch, create and deploy to a preview
      # environment with a comment on the PR including the preview URL.
      - name: Deploy application to Azure
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "upload" # upload artifacts and deploy to either production or a preview environment
          app_location: ${{ env.APP_LOCATION }}
          api_location: ${{ env.API_LOCATION }}
          output_location: ${{ env.OUTPUT_LOCATION }}

  e2e_job:
    name: E2E Job
    needs: cd_job

    # Execute this job upon pushes to the default branch or
    # PRs into the default branch that are not closed.
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')

    permissions:
      contents: read # for actions/checkout to fetch code

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3

      - name: Use Node.js
        id: nodejs
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"
          cache: "yarn"
          cache-dependency-path: ${{ env.APP_WORKING_DIR }}/yarn.lock

      - name: Install dependencies via yarn with frozen lockfile
        id: installdeps
        working-directory: ${{ env.APP_WORKING_DIR }}
        run: yarn --frozen-lockfile
        
      # Run the cypress e2e sanity test suite on the Azure deployment.
      # The static_web_app_url output variable from the deployment step
      # will contain either the production URL or the URL of a preview environment
      # if this workflow is running on a PR.
      - name: E2E test suite on deployment
        id: e2e
        uses: cypress-io/github-action@v5
        with:
          working-directory: ${{ env.APP_WORKING_DIR }}
          config: baseUrl=${{ needs.cd_job.outputs.preview-url }}

      # Upload the cypress e2e test suite screenshots as artifacts to this
      # workflow if failure is detected in a previous step.
      - name: Upload E2E test suite failure screenshots artifact
        id: e2e-failure-screenshot-upload
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-failure-screenshots
          path: ${{ env.APP_WORKING_DIR }}/cypress/screenshots

      # Upload the cypress e2e test suite videos as artifacts to this workflow.
      - name: Upload E2E test suite video artifact
        id: e2e-video-upload
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-videos
          path: ${{ env.APP_WORKING_DIR }}/cypress/videos

  close_pull_request_job:
    name: Clean Up Preview Environments Job

    permissions:
      contents: none # no repo access required in this job

    # Execute this job upon closure of a pull request to clean up any Azure preview
    # environments that existed from the opening or modification of a PR.
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    runs-on: ubuntu-latest

    steps:
      - name: On Close Pull Request Clean Up Preview Environments
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          action: "close" # remove preview environment upon PR closure
          app_location: ${{ env.APP_LOCATION }}
          api_location: ${{ env.API_LOCATION }}
          output_location: ${{ env.OUTPUT_LOCATION }}
